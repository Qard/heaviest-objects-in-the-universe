const { context, getOctokit } = require('@actions/github')
const { getInput, setFailed, info, warning } = require('@actions/core')
const { inspect } = require('util')

const {
  moduleSizeTree,
  toMarkdown
}= require('./')

const events = new Set([
  'pull_request',
  'pull_request_target'
])

async function createOrUpdateIssueComment (message) {
  info(`Event type ${context.eventName}`)
  if (!events.has(context.eventName)) return

  const sig = '<sub>ðŸ¤– This report was automatically generated by [heaviest-objects-in-the-universe](https://github.com/qard/heaviest-objects-in-the-universe/)<sub>'
  const body = [message, sig].join('\n\n')

  const token = getInput('github-token')
  const octokit = getOctokit(token)

  const { repo, payload } = context
  const { pull_request } = payload
  const { number: issue_number } = pull_request

  info(`Getting existing comments for issue #${issue_number}`)
  const { data: comments } = await octokit.rest.issues.listComments({
    ...repo,
    issue_number
  })

  const prevComment = comments.find(comment => comment.body.endsWith(sig))
  if (prevComment) {
    info(`Updating previous comment #${prevComment.id}`)
    await octokit.rest.issues.updateComment({
      ...repo,
      comment_id: prevComment.id,
      body,
    })
  } else {
    info(`Posting new comment for issue #${issue_number}`);
    await octokit.rest.issues.createComment({
      ...repo,
      issue_number,
      body,
    })
  }
}

async function main () {
  const withDev = getInput('with-dev-dependencies')
  const data = await moduleSizeTree('./', { withDev })
  console.log(inspect(data, false, 100, true))
  await createOrUpdateIssueComment(toMarkdown(data))
}

main().catch(err => {
  setFailed(err.message)
  warning(err.stack)
})
